# Алгоритм Беллмана-Форда = алгоритм поиска кратчайшего пути в взвешенном графе с отрицательными ребрами.
# При наличии в графе отрицательного цикла задача поиска кратчайшего пути теряет смысл, т.к. он уходит в -inf

# Хорошее объяснение на русском: https://youtu.be/950mtbENLVU
# Пример на английском: https://youtu.be/ne9eZ4ezg0Y

# Обозначения:
'''
# s   - исходная вершина
# Wuv - расстояние до вершины u (из s) + расстояние до v (из u)
# Dv  - сумма расстояний пути из s в v
# n - число вершин
'''

# Принцип алгоритма:
'''
# 1 назначить Dv для каждой вершины = +inf, кроме исходной вершины s (для неё путь = 0)
# 2. Обойти n-1 раз каждую вершину (u v) обновляя кратчайший путь до каждой вершины из исходной
Dv = min(Dv, Du + Wuv)
# 3. Проверить на наличие отрицательного цикла.

'''

def bellman_ford(nodes, edges, source_index=0):
    # Инициализация ребер. Расстояний между вершинами 
    path_lengths = {v: float('inf') for v in nodes}
    path_lengths[source_index] = 0

    paths = {v: [] for v in nodes}
    paths[source_index] = [source_index]

    for _ in range(len(nodes) - 1):
        for (u, v), w_uv in edges.items():
            if path_lengths[u] + w_uv < path_lengths[v]:
                path_lengths[v] = path_lengths[u] + w_uv
                paths[v] = paths[u] + [v]
    
    # Проверка на наличие отрицательного цикла
    
    for (u, v), w_uv in edges.items():
        if path_lengths[u] + w_uv < path_lengths[v]:
            print("В графе имеется отрицательный цикл!")

    return path_lengths, paths


# Входные данные

# 1. Граф без отирицательных ребер
'''
'''
nodes = [0, 1, 2, 3, 4, 5] # Названия вершин
edges = {(0, 1): 1.0, (1, 0): 1.0, (0, 2): 1.5, (2, 0): 1.5,
        (0, 3): 2.0, (3, 0): 2.0, (1, 3): 0.5, (3, 1): 0.5,
        (1, 4): 2.5, (4, 1): 2.5, (2, 3): 1.5, (3, 2): 1.5,
        (4, 5): 2.0, (5, 4): 2.0,
        (5, 3): 1.0}

# Вывод
shortest_path_lengths, shortest_paths = bellman_ford(nodes, edges, 0)
print("Найкратчайшие пути из заданной вершины во все остальные: ")
print(shortest_path_lengths)
print("Вершины, лежащие в кратчайших путях")
print(shortest_paths)


# Ребра между вершинами и их веса

# Затем хочу нарисовать графы в редакторе и запустить алгоритмы там.
# Посмотрю, как они работают.


