# test input

lst_n = [100, 200, 300, 300, 100]
lst_m = [500, 100, 100, 200, 100]
s = 1000 # 1000

n = 3 # 5
m = 4 # 5

# Матрица возможных исходов
matrix = []

# Заготовка - матрица пустышка размером m+1 на n+1
for i in range(n+1):
    matrix.append([0] * (m+1))

# Установка исходных стоимостей добраться до каждого резюме из стопкок в матрицы
# при взятии резюме только из этой стопки

# Заполнение 1ой строки матрицы, проходом по всем её столбцам, начиная с 1
for i in range(1, m+1):
    matrix[0][i] = sum(lst_n[:i])

# Заполнение 1ого столбца матрицы, проходом по всем её строкам, начиная с 1
for i in range(1, n+1):
    matrix[i][0] = sum(lst_m[:i])

# output full matrix template
for row in matrix:
    print(row, sep='\n')


# Иду по строкам матрицы возможных исходов, 
# чтобы определить макс. кол. резюме, что можно собрать
max_cv_collected = 0

# Для рассчёта стоимости взятия резюме, соответствующих индексам i j
# Использую непосредственные стоимости этих резюме.
# Добавляю 0, чтобы размерности совпали с представлением матрицы
lst_n.insert(0, 0) 
lst_m.insert(0, 0) 

# алгоритм рассчёта стоимости взятия резюме, соответствующих индексам i j
for i in range(0, n+1):
    for j in range(1, m+1):
        if s >= matrix[i][j-1] + lst_n[j]: # Если купить это резюме можно
            # Вычисляю стоимость взятия этого резюме
            matrix[i][j] = matrix[i][j-1] + lst_n[j] # Стоимость взятия предыдущих + нового
            if i + j > max_cv_collected:
                max_cv_collected = i + j
        else:
            break
            
print()
# output full matrix template
for row in matrix:
    print(row, sep='\n')

print(max_cv_collected)
